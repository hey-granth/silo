from rest_framework import serializers
from .models import File, FileChunk, FileAccessLog, SharedFileLink


# this serializer is used when a user requests to upload a file
class FileUploadRequestSerializer(serializers.ModelSerializer):
    class Meta:
        model = File
        fields = ["file_name", "file_size", "checksum", "file_type"]


# this serializer is used when a user uploads a file, so the system generates a file id, storage path, and presigned url
class FileUploadConfirmSerializer(serializers.ModelSerializer):
    class Meta:
        model = File
        fields = ["id", "file_path", "uploaded_at", "uploaded", "checksum", "file_type"]
        read_only_fields = fields


# A presigned URL is a URL generated by your storage service (MinIO, S3, R2, etc.) that lets a client upload or download a specific object directly to the bucket, without your server handling the file. It’s signed with your credentials and expires after a set time. The client can PUT (upload) or GET (download) the file using this URL. You don’t expose your secret keys, and your server only authorizes the operation.


class FileDownloadRequestSerializer(serializers.Serializer):
    file_id = serializers.UUIDField()


class FileDownloadResponseSerializer(serializers.Serializer):
    download_url = serializers.URLField()
    file_name = serializers.CharField()
    file_size = serializers.IntegerField()
